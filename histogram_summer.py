# -*- coding: utf-8 -*-
"""
Created on Jan 31 2018

@author: Bobby Johnston
robertej@mit.edu

Quick Script to sum counts in a two column data file



"""
import matplotlib.pyplot as plt
import numpy as np
import sys
import os
import argparse

default_infile = 'Histogram_Master'
default_outfile = 'Histogram_Sum_Table'
default_time = 60
default_verbose = 1
default_max = 4096
default_all = 0
default_col1 = 20
default_col1 = 18
default_spacer = 10
description_program = """ This python script sums all values in a 2 column histogram (sums second column)\n
			For use in analyzing NaI digitizer histograms, but can be generalized to other uses\n"""


parser = argparse.ArgumentParser(description=description_program)
parser.add_argument('-i','--ifiname',default=default_infile,help='Set input file name \n',required=False)
parser.add_argument('-o','--ofiname',default=default_outfile,help='Set output file name \n',required=False)
parser.add_argument('-t','--time',default=default_time,help='Set time of run duration \n',required=False)
parser.add_argument('-v','--verbose',action='store_true',help='Turn printout on (1) (default) or off (0)\n',required=False)
parser.add_argument('-m','--max',default=default_max,help='Set maximum number of rows in histogram\n',required=False)
parser.add_argument('-a','--all',action='store_true',help='Process all files in current directory\n',required=False)
parser.add_argument('-r','--remove',action='store_true',help='Remove previously stored histogram count file\n',required=False)
parser.add_argument('-c1','--column_one',default=default_col1,help='Set length of output file column 1 \n',required=False)
parser.add_argument('-c2','--column_two',default=default_col1,help='Set length of output file column 2 \n',required=False)



args = vars(parser.parse_args())

infilename = args['ifiname']
outfilename = args['ofiname']
time = int(args['time'])
verbose = args['verbose']	
limit = args['max']
do_all = args['all']
col1 = int(args['column_one'])
col2 = int(args['column_two'])

if args['remove'] == True:
	os.remove(outfilename)
	if verbose == True:
		print('\n' + outfilename + ' has been deleted \n')

if do_all == False:
	if len(infilename) > (col1 + default_spacer):
		col1=len(infilename) + default_spacer
elif do_all == True:
	path = '.'
	i = 0
	for file in os.listdir(path):
		if len(file) > (col1 + default_spacer):
			col1=len(file) + default_spacer


me = os.path.basename(__file__)
cwd = os.getcwd()
filelocation = cwd + '/' + outfilename
if not os.path.exists(filelocation):
	with open(outfilename, 'w+') as writefile:
		writefile.write('This file was generated by ' + me + '\n \n')
		writefile.write("{:{n}s} {:{p}s} {} \n\n".format('Histogram File Name','Total Counts','Approximate Rate',n=col1,p=col2))

def counting(fname):
	sum = 0
	f = open(fname, 'rU' ) 
	for line in f:
		cells = line.split( "	" )
		if int(cells[0]) < limit:
			k = cells[1]
			sum = sum + int(cells[1])
	f.close()

	if verbose == True:
		print('Total number of counts in',fname,'---',sum,'\n')


	rate = int(sum/time)
	with open(outfilename, 'a+') as writefile:
		writefile.write("{:{n}s} {:{p}s} {} \n".format(fname,str(sum),str(rate)+' Hz',n=col1,p=col2))


if do_all == False:
	if verbose == True:
		print('Processing ' + infilename)
	counting(infilename)
	if verbose == True:
		print('Completed counting for' + outfilename + ' \n')

elif do_all == True:
	path = '.'
	i = 0
	for file in os.listdir(path):
		if file != outfilename:
			if verbose == True:			
				print('Processing ' + file)
			counting(file)
			i = i +1
	if verbose == True:
		print('\nCompleted counting in ' + str(i) + ' files \n')
else:
	print("Error : something went wrong")



